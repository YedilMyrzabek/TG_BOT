import os
import sys
import asyncio
import asyncpg
import datetime
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ContentType
)
from aiogram.client.bot import DefaultBotProperties  # –î“±—Ä—ã—Å –∏–º–ø–æ—Ä—Ç
from dotenv import load_dotenv
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from logging.handlers import RotatingFileHandler

# 1. Windows “Ø—à—ñ–Ω —Ü–∏–∫–ª —Å–∞—è—Å–∞—Ç—Ç–∞—Ä—ã–Ω –æ—Ä–Ω–∞—Ç—É
if sys.platform.startswith('win'):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–Ω–∞—Ç—É
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")

# –õ–æ–≥ —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω —Ä–æ—Ç–∞—Ü–∏—è–ª–∞—É
file_handler = RotatingFileHandler("bot.log", maxBytes=10**6, backupCount=5, encoding='utf-8')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

# –õ–æ–≥—Ç–∞—Ä–¥—ã –∫–æ–Ω—Å–æ–ª—å“ì–∞ —à—ã“ì–∞—Ä—É
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
logger.addHandler(stream_handler)

# 3. –û—Ä—Ç–∞ –∞–π–Ω—ã–º–∞–ª—ã–ª–∞—Ä—ã–Ω –∂“Ø–∫—Ç–µ—É
load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
DB_URL = os.getenv("DB_URL")

if not API_TOKEN or not DB_URL:
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –Ω–µ–º–µ—Å–µ DB_URL .env —Ñ–∞–π–ª—ã!")
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –Ω–µ–º–µ—Å–µ DB_URL .env —Ñ–∞–π–ª—ã!")

# 4. –ë–æ—Ç—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É (HTML parse_mode “õ–æ–ª–¥–∞–Ω—É)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

# 5. –ê–¥–º–∏–Ω–¥–µ—Ä–¥—ñ“£ —Ç—ñ–∑—ñ–º—ñ (–Ω–µ–º–µ—Å–µ –∂–∏—ã–Ω—ã)
ADMIN_IDS = {1044841557, 1727718224}  # <-- “õ–∞–∂–µ—Ç—Ç—ñ Telegram user_id

# 6. Asyncpg –∞—Ä“õ—ã–ª—ã –¥–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ “õ–æ—Å—ã–ª—É
async def get_db_pool():
    return await asyncpg.create_pool(dsn=DB_URL, command_timeout=60)

# 7. –î–µ—Ä–µ–∫“õ–æ—Ä–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
async def initialize_db(pool):
    async with pool.acquire() as conn:
        # –¢–ê–ë–õ–ò–¶–ê users
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)

        # –¢–ê–ë–õ–ò–¶–ê user_cooldowns (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è)
        # –•—Ä–∞–Ω–∏–º –∫—É–ª–¥–∞—É–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏ —Å–ª–∏–≤-–ø—Ä–æ–±–Ω–∏–∫–æ–≤, –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS user_cooldowns (
                user_id BIGINT,
                subject_name TEXT,
                next_free_time TIMESTAMP,
                next_special_time TIMESTAMP,
                PRIMARY KEY (user_id, subject_name)
            );
        """)

        # –¢–ê–ë–õ–ò–¶–ê user_access
        # –î–ª—è —Å–ª–∏–≤-–ø—Ä–æ–±–Ω–∏–∫–æ–≤: access_type='special', remaining_count (–º–∞–∫—Å 10),
        # last_special_test_id —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–¥–∞–Ω–Ω—ã–π —Å–ª–∏–≤ —Ç–µ—Å—Ç
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS user_access (
                user_id BIGINT,
                subject_name TEXT,
                access_type TEXT,
                remaining_count INTEGER,
                last_special_test_id INTEGER DEFAULT 0,
                PRIMARY KEY (user_id, subject_name, access_type)
            );
        """)

        # –¢–ê–ë–õ–ò–¶–ê tests (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS tests (
                id SERIAL PRIMARY KEY,
                subject TEXT,
                file_name TEXT,
                file_url TEXT
            );
        """)

        # –¢–ê–ë–õ–ò–¶–ê premium_tests (—Å–ª–∏–≤)
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS premium_tests (
                id SERIAL PRIMARY KEY,
                subject TEXT,
                access_type TEXT NOT NULL DEFAULT 'special',
                file_name TEXT,
                file_url TEXT
            );
        """)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —á—Ç–æ–±—ã –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∞–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–±–Ω–∏–∫–∏
        # –õ–æ–≥–∏–∫–∞ –±–µ—Ä—ñ–ª–≥–µ–Ω /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω–¥–∞ –∂“Ø–∑–µ–≥–µ –∞—Å–∞–¥—ã

# 8. –î–µ—Ä–µ–∫“õ–æ—Ä “õ–æ—Å—ã–ª—ã–º –ø—É–ª—ã–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
pool = None

async def on_startup():
    global pool
    pool = await get_db_pool()
    await initialize_db(pool)
    logger.info("–î–µ—Ä–µ–∫“õ–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞–Ω–¥—ã.")

# 9. –ñ–∞—Ä–∏—è–ª–∞–Ω—ã–º–¥–∞—Ä “Ø—à—ñ–Ω –∫“Ø–π –∞–Ω—ã“õ—Ç–∞–º–∞–ª–∞—Ä—ã
class AnnouncementStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()

# 10. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã
def get_subjects_keyboard():
    """–ü”ô–Ω–¥—ñ —Ç–∞“£–¥–∞—É “Ø—à—ñ–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ üìö", callback_data="subject_math")],
        [InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ üíª", callback_data="subject_informatics")],
    ])
    return keyboard

def get_variant_keyboard(subject_code: str):
    """–¢–µ—Å—Ç —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞—É “Ø—à—ñ–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞. "–°–ª–∏–≤ –Ω“±—Å“õ–∞" –±–∞—Ä–ª—ã“õ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–µ–¥—ñ."""
    buttons = [
        [InlineKeyboardButton(text="–¢–µ–≥—ñ–Ω –Ω“±—Å“õ–∞ üÜì", callback_data=f"variant_free_{subject_code}")],
        [InlineKeyboardButton(text="–°–ª–∏–≤ –Ω“±—Å“õ–∞ üíé", callback_data=f"variant_special_{subject_code}")],
        [InlineKeyboardButton(text="–ê—Ä—Ç“õ–∞ üîô", callback_data="back_subjects")],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def get_help_keyboard():
    """–ö”©–º–µ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Å—ã."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–Ω—é üìã", callback_data="main_menu")],
    ])
    return keyboard

def get_skip_or_add_photo_keyboard():
    """–•–∞–±–∞—Ä–ª–∞–º–∞“ì–∞ —Å—É—Ä–µ—Ç “õ–æ—Å—É –Ω–µ–º–µ—Å–µ –ø—Ä–æ–ø—É—Å–∫ “Ø—à—ñ–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–æ—Ç–æ “õ–æ—Å—É üì∑", callback_data="add_photo")],
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üõë", callback_data="skip_photo")]
    ])
    return keyboard

# 11. –ö”©–º–µ–∫—à—ñ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä
async def safe_edit_text(callback: CallbackQuery, text: str, parse_mode: str = "HTML", reply_markup: InlineKeyboardMarkup = None):
    """
    –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã“£ –º”ô—Ç—ñ–Ω—ñ–Ω ”©“£–¥–µ—É–≥–µ —Ç—ã—Ä—ã—Å–∞–¥—ã. –ï–≥–µ—Ä –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞—Å–∞, –∂–∞“£–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä–µ–¥—ñ.
    """
    try:
        await callback.message.edit_text(text=text, parse_mode=parse_mode, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        logger.error(f"–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e.message}", exc_info=True)
        # –ï–≥–µ—Ä —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ—É–≥–µ –±–æ–ª–º–∞—Å–∞, –∂–∞“£–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä–µ–º—ñ–∑
        await callback.message.answer(text=text, parse_mode=parse_mode, reply_markup=reply_markup)
        # “ö–∞–∂–µ—Ç –±–æ–ª—Å–∞, –±–∞—Å—Ç–∞–ø“õ—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–æ—é
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass  # –ï–≥–µ—Ä –∂–æ—é“ì–∞ –±–æ–ª–º–∞—Å–∞, –µ–ª–µ–º–µ–π–º—ñ–∑

async def notify_admins(message: str):
    """–ë–∞—Ä–ª—ã“õ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–ª–∞—Ä–¥—ã –º–∞“£—ã–∑–¥—ã “õ–∞—Ç–µ–ª–µ—Ä –Ω–µ–º–µ—Å–µ –æ“õ–∏“ì–∞–ª–∞—Ä —Ç—É—Ä–∞–ª—ã —Ö–∞–±–∞—Ä–¥–∞—Ä –µ—Ç–µ–¥—ñ."""
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, f"‚ùó <b>“ö–∞—Ç–µ:</b> {message}", parse_mode="HTML")
        except Exception as e:
            logger.error(f"–ê–¥–º–∏–Ω–≥–µ —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—É–¥–µ “õ–∞—Ç–µ: {admin_id} - {e}")

# –°–æ“£“ì—ã –º”ô–∑—ñ—Ä —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã–Ω —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω –≥–ª–æ–±–∞–ª–¥—ã —Å”©–∑–¥—ñ–∫
user_last_menu_message = {}

# 12. /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ—É
async def send_welcome(message: Message):
    """/start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ–π–¥—ñ. –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã —Ç—ñ—Ä–∫–µ–ø, —Å”ô–ª–µ–º–¥–µ—Å—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω –∂—ñ–±–µ—Ä–µ–¥—ñ."""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    async with pool.acquire() as conn:
        try:
            await conn.execute("""
                INSERT INTO users (user_id, username, first_name, last_name)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id) DO NOTHING
            """, user_id, username, first_name, last_name)
        except Exception as e:
            logger.error("–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã —Ç—ñ—Ä–∫–µ—É “õ–∞—Ç–µ—Å—ñ:", exc_info=True)
            await notify_admins(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã —Ç—ñ—Ä–∫–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {user_id} - {str(e)}")
            await message.answer("‚ùå –¢—ñ—Ä–∫–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. ”®—Ç—ñ–Ω–µ–º—ñ–∑, –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑.")
            return

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –µ—â—ë –∑–∞–ø–∏—Å–∏ –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ, –≤—ã–¥–∞—ë–º –µ–º—É –¥–æ—Å—Ç—É–ø —Å –∫—É–ª–¥–∞—É–Ω–æ–º
        subjects = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"]
        for subj in subjects:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å 'free' –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            record = await conn.fetchrow("""
                SELECT * FROM user_cooldowns
                WHERE user_id=$1 AND subject_name=$2
            """, user_id, subj)
            # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º –∫—É–ª–¥–∞—É–Ω–æ–º
            if not record:
                await conn.execute("""
                    INSERT INTO user_cooldowns (user_id, subject_name, next_free_time, next_special_time)
                    VALUES ($1, $2, NOW() - INTERVAL '1 day', NOW() - INTERVAL '1 day')
                """, user_id, subj)

    # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ —Å–ª–∏–≤ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
    has_special_access = await check_special_access(user_id)
    logger.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {user_id} —Å–ª–∏–≤ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫–∫–µ –∏–µ: {has_special_access}")

    # –ñ–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω —Å”ô–ª–µ–º–¥–µ—Å—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã
    welcome_text = (
        "üëã –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! \n\n"
        "–ë—ñ–∑ —Å—ñ–∑–≥–µ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∂”ô–Ω–µ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –ø”ô–Ω–¥–µ—Ä –±–æ–π—ã–Ω—à–∞ “Ø–∑–¥—ñ–∫ –Ω“±—Å“õ–∞–ª–∞—Ä–¥—ã “±—Å—ã–Ω–∞–º—ã–∑.\n\n"
        "üîç –¢–µ–≥—ñ–Ω –Ω“±—Å“õ–∞–ª–∞—Ä –∞—Ä“õ—ã–ª—ã –¥–∞–π—ã–Ω–¥–∞–ª—ã“£—ã–∑ –∂”ô–Ω–µ ”©–∑ –¥–µ“£–≥–µ–π—ñ“£—ñ–∑–¥—ñ –∞—Ä—Ç—Ç—ã—Ä—ã“£—ã–∑.\n\n"
        "üíé –°–ª–∏–≤ –Ω“±—Å“õ–∞–ª–∞—Ä –∞—Ä“õ—ã–ª—ã ”©—Ç–∫–µ–Ω –∂”ô–Ω–µ –∞–ª–¥–∞“ì—ã —É–∞“õ—ã—Ç—Ç–∞ –∫–µ–∑–¥–µ—Å—É—ñ –º“Ø–º–∫—ñ–Ω –Ω“±—Å“õ–∞–ª–∞—Ä–º–µ–Ω ”©–∑—ñ“£—ñ–∑–¥—ñ —Å—ã–Ω–∞–ø –∫”©—Ä—ñ“£—ñ–∑.\n\n"
        "P.S. –∫–µ–ª–µ—Å—ñ –Ω“±—Å“õ–∞–Ω—ã 24 —Å–∞“ì–∞—Ç—Ç–∞–Ω —Å–æ“£ –∞–ª–∞ –∞–ª–∞—Å—ã–∑ ü§ì (–∞–ª—É “Ø—à—ñ–Ω ”ô—Ä“õ–∞—à–∞–Ω /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –±–∞—Å–∞—Å—ã–∑‚ùóÔ∏è).\n\n"
        "‚ÑπÔ∏è “ö–æ—Å—ã–º—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä –±–æ–π—ã–Ω—à–∞ /help."
    )

    keyboard = get_subjects_keyboard()
    try:
        sent_message = await message.answer(welcome_text, parse_mode="HTML", reply_markup=keyboard)
        # /help —à–∞“õ—ã—Ä—É –∫–µ–∑—ñ–Ω–¥–µ –∂–æ—é “Ø—à—ñ–Ω message_id —Å–∞“õ—Ç–∞–π–¥—ã
        user_last_menu_message[user_id] = sent_message.message_id
    except TelegramBadRequest as e:
        logger.error(f"–•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e.message}", exc_info=True)
        await message.answer("‚ùå –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.")

# –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ —Å–ª–∏–≤ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
async def check_special_access(user_id: int) -> bool:
    """–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ —Å–ª–∏–≤ –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä–≥–µ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä–µ–¥—ñ."""
    async with pool.acquire() as conn:
        access = await conn.fetchrow("""
            SELECT remaining_count FROM user_access
            WHERE user_id = $1 AND access_type = 'special' AND remaining_count > 0
            LIMIT 1
        """, user_id)
        if access:
            return True
        else:
            return False

# –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã–Ω –∫”©—Ä—Å–µ—Ç—É
async def show_subscribers(message: Message):
    """–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã–Ω –∫”©—Ä—Å–µ—Ç–µ–¥—ñ."""
    async with pool.acquire() as conn:
        try:
            count = await conn.fetchval("SELECT COUNT(*) FROM users")
            await message.answer(f"üìà <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>: {count}", parse_mode="HTML")
        except Exception as e:
            logger.error("–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã–Ω –µ—Å–µ–ø—Ç–µ—É–¥–µ “õ–∞—Ç–µ:", exc_info=True)
            await notify_admins(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã–Ω –µ—Å–µ–ø—Ç–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {str(e)}")
            await message.answer("‚ùå –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã–Ω –µ—Å–µ–ø—Ç–µ—É–¥–µ “õ–∞—Ç–µ –±–æ–ª–¥—ã.")

# CallbackQuery-–ª–µ—Ä–¥—ñ ”©“£–¥–µ—É
async def handle_callback(callback: CallbackQuery):
    data = callback.data
    user_id = callback.from_user.id
    logger.info(f"CallbackQuery “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã: {data} –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–¥–∞–Ω: {user_id}")

    # Callback-–∫–µ –∂–∞—É–∞–ø –±–µ—Ä—É
    try:
        await callback.answer()
    except TelegramBadRequest as e:
        logger.error(f"CallbackQuery –∂–∞—É–∞–ø –±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e.message}", exc_info=True)

    try:
        if data.startswith("subject_"):
            subject_code = data.split("_")[1]
            # has_special_access = await check_special_access(user_id)  # –ê–ª–¥—ã“£“ì—ã —à–∞—Ä—Ç—Ç—ã –∞–ª—ã–ø —Ç–∞—Å—Ç–∞–¥—ã“õ
            logger.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {user_id} –ø”ô–Ω–¥—ñ —Ç–∞“£–¥–∞–π–¥—ã: {subject_code}.")
            await safe_edit_text(
                callback,
                text="<b>üîç “ö–∞–Ω–¥–∞–π –Ω“±—Å“õ–∞ –∫–µ—Ä–µ–∫?</b>",
                parse_mode="HTML",
                reply_markup=get_variant_keyboard(subject_code)  # 'has_special_access' –∞–ª—ã–ø —Ç–∞—Å—Ç–∞–ª–¥—ã
            )
            return

        if data in {"main_menu", "back_subjects"}:
            # has_special_access = await check_special_access(user_id)  # –ê–ª–¥—ã“£“ì—ã —à–∞—Ä—Ç—Ç—ã –∞–ª—ã–ø —Ç–∞—Å—Ç–∞–¥—ã“õ
            logger.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {user_id} –Ω–µ–≥—ñ–∑–≥—ñ –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–∞–¥—ã.")
            await safe_edit_text(
                callback,
                text="<b>üëã –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ!</b> \n\n–ü”ô–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
                parse_mode="HTML",
                reply_markup=get_subjects_keyboard()
            )
            return

        if data == "show_subscribers":
            async with pool.acquire() as conn:
                try:
                    count = await conn.fetchval("SELECT COUNT(*) FROM users")
                    await safe_edit_text(
                        callback,
                        text=f"üìà <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>: {count}",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error("–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã–Ω –µ—Å–µ–ø—Ç–µ—É–¥–µ “õ–∞—Ç–µ:", exc_info=True)
                    await safe_edit_text(
                        callback,
                        text="‚ùå –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã–Ω –µ—Å–µ–ø—Ç–µ—É–¥–µ “õ–∞—Ç–µ –±–æ–ª–¥—ã.",
                        parse_mode="HTML"
                    )
            return

        if data.startswith("variant_free_"):
            subject_code = data.replace("variant_free_", "")
            await handle_free_variant(callback, subject_code)
            return

        if data.startswith("variant_special_"):
            subject_code = data.replace("variant_special_", "")
            access_type = "special"  # –¢–µ–∫ "special" —Ç–∏–ø—ñ–Ω “õ–æ–ª–¥–∞–Ω—É
            await handle_special_variant(callback, subject_code, access_type)
            return

        await callback.answer("‚ùå –¢–∞“õ—ã—Ä—ã–ø –∞–Ω—ã“õ—Ç–∞–ª–º–∞–¥—ã.", show_alert=False)
    except TelegramBadRequest as e:
        logger.error(f"TelegramBadRequest “õ–∞—Ç–µ—Å—ñ: {e.message}", exc_info=True)
        await safe_edit_text(
            callback,
            text="‚ùå –°“±—Ä–∞—É–¥—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error("–ë–µ–π—Ç–∞–Ω—ã—Å “õ–∞—Ç–µ:", exc_info=True)
        await safe_edit_text(
            callback,
            text="‚ùå –ë–µ–π—Ç–∞–Ω—ã—Å “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.",
            parse_mode="HTML"
        )

# –¢–µ–≥—ñ–Ω –ø—Ä–æ–±–Ω–∏–∫—Ç—ñ ”©“£–¥–µ—É
async def handle_free_variant(callback: CallbackQuery, subject_code: str):
    user_id = callback.from_user.id
    subject_map = {
        "math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "informatics": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    }
    subject_name = subject_map.get(subject_code, "–ë–µ–ª–≥—ñ—Å—ñ–∑")

    now = datetime.datetime.now()

    async with pool.acquire() as conn:
        try:
            # –ï–≥–µ—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∞–¥–º–∏–Ω –±–æ–ª—Å–∞ ‚Äî —à–µ–∫—Ç–µ—É–ª–µ—Ä–¥—ñ –µ–ª–µ–º–µ–π–¥—ñ
            if user_id in ADMIN_IDS:
                test = await conn.fetchrow("""
                    SELECT id, file_name, file_url
                    FROM tests
                    WHERE subject = $1
                    ORDER BY RANDOM() LIMIT 1
                """, subject_name)
                if test:
                    file_name, file_url = test["file_name"], test["file_url"]
                    await bot.send_document(
                        chat_id=user_id,
                        document=file_url,
                        caption=f"üìÑ <b>–¢–µ–≥—ñ–Ω –Ω“±—Å“õ–∞ (–∞–¥–º–∏–Ω)</b>: {file_name}",
                        parse_mode="HTML",
                        protect_content=True
                    )
                else:
                    await callback.message.answer(
                        f"‚ùå –ö–µ—à—ñ—Ä—ñ“£—ñ–∑, <b>{subject_name}</b> –±–æ–π—ã–Ω—à–∞ —Ç–µ–≥—ñ–Ω –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä –∂–æ“õ.",
                        parse_mode="HTML",
                        reply_markup=get_subjects_keyboard()
                    )
                await safe_edit_text(
                    callback,
                    text="<b>üëã –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ!</b> \n\n–ü”ô–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
                    parse_mode="HTML",
                    reply_markup=get_subjects_keyboard()
                )
                return

            # –¢–µ–≥—ñ–Ω —Ç–µ—Å—Ç—Ç–µ—Ä–≥–µ –∫—É–ª–¥–∞—É–Ω —Ç–µ–∫—Å–µ—Ä—É
            cooldown_record = await conn.fetchrow("""
                SELECT next_free_time FROM user_cooldowns
                WHERE user_id=$1 AND subject_name=$2
            """, user_id, subject_name)

            if cooldown_record and cooldown_record["next_free_time"]:
                next_free_time = cooldown_record["next_free_time"]
                if now < next_free_time:
                    diff = next_free_time - now
                    seconds = int(diff.total_seconds())
                    hours = seconds // 3600
                    minutes = (seconds % 3600) // 60
                    await callback.message.answer(
                        f"‚è≥ <b>–°—ñ–∑ –∫–µ–ª–µ—Å—ñ —Ç–µ–≥—ñ–Ω –ø—Ä–æ–±–Ω–∏–∫—Ç—ñ {hours} —Å–∞“ì–∞—Ç {minutes} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω –∞–ª–∞ –∞–ª–∞—Å—ã–∑.</b>",
                        parse_mode="HTML",
                        reply_markup=get_subjects_keyboard()
                    )
                    return

            # –¢–µ–≥—ñ–Ω —Ç–µ—Å—Ç—Ç–µ—Ä–¥—ñ –∫–µ–∑–¥–µ–π—Å–æ“õ —Ç–∞“£–¥–∞—É
            test = await conn.fetchrow("""
                SELECT id, file_name, file_url
                FROM tests
                WHERE subject = $1
                ORDER BY RANDOM()
                LIMIT 1
            """, subject_name)

            if not test:
                await callback.message.answer(
                    f"‚ùå –ë–∞—Å“õ–∞ —Ç–µ–≥—ñ–Ω –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä –∂–æ“õ.",
                    parse_mode="HTML",
                    reply_markup=get_subjects_keyboard()
                )
                return

            # –§–∞–π–ª–¥—ã –∂—ñ–±–µ—Ä—É
            test_id = test["id"]
            file_name, file_url = test["file_name"], test["file_url"]
            await bot.send_document(
                chat_id=user_id,
                document=file_url,
                caption=f"üìÑ <b>–¢–µ–≥—ñ–Ω –Ω“±—Å“õ–∞</b>: {file_name}",
                parse_mode="HTML",
                protect_content=True
            )
            await safe_edit_text(
                callback,
                text="<b>üëã –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ!</b> \n\n–ü”ô–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
                parse_mode="HTML",
                reply_markup=get_subjects_keyboard()
            )

            # –ö—É–ª–¥–∞—É–Ω–¥—ã –∂–∞“£–∞—Ä—Ç—É: 24 —Å–∞“ì–∞—Ç
            new_time = now + datetime.timedelta(hours=24)
            await conn.execute("""
                INSERT INTO user_cooldowns (user_id, subject_name, next_free_time, next_special_time)
                VALUES ($1, $2, $3, COALESCE(next_special_time, NOW() - INTERVAL '1 day'))
                ON CONFLICT (user_id, subject_name)
                DO UPDATE SET next_free_time=EXCLUDED.next_free_time
            """, user_id, subject_name, new_time)

        except TelegramBadRequest as e:
            logger.error(f"TelegramBadRequest “õ–∞—Ç–µ—Å—ñ: {e.message}", exc_info=True)
            await callback.message.answer("‚ùå –°“±—Ä–∞—É–¥—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.")
        except Exception as e:
            logger.error("–¢–µ–≥—ñ–Ω –Ω“±—Å“õ–∞–Ω—ã –æ—Ä—ã–Ω–¥–∞—É “õ–∞—Ç–µ—Å—ñ:", exc_info=True)
            await callback.message.answer("‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –ê–¥–º–∏–Ω–≥–µ –∂–∞–∑—ã“£—ã–∑.")

# –°–ª–∏–≤ –ø—Ä–æ–±–Ω–∏–∫—Ç—ñ ”©“£–¥–µ—É
async def handle_special_variant(callback: CallbackQuery, subject_code: str, access_type: str):
    user_id = callback.from_user.id
    subject_map = {
        "math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "informatics": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    }
    subject_name = subject_map.get(subject_code, "–ë–µ–ª–≥—ñ—Å—ñ–∑")

    now = datetime.datetime.now()

    async with pool.acquire() as conn:
        try:
            # –ï–≥–µ—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∞–¥–º–∏–Ω –±–æ–ª—Å–∞, —à–µ–∫—Ç–µ—É–ª–µ—Ä–¥—ñ –µ–ª–µ–º–µ–π–¥—ñ
            if user_id in ADMIN_IDS:
                test = await conn.fetchrow(
                    """
                    SELECT id, file_name, file_url 
                    FROM premium_tests
                    WHERE subject = $1 AND access_type = $2
                    ORDER BY RANDOM()
                    LIMIT 1
                    """,
                    subject_name, access_type
                )
                if test:
                    file_name, file_url = test["file_name"], test["file_url"]
                    await bot.send_document(
                        chat_id=user_id,
                        document=file_url,
                        caption=f"üíé <b>–°–ª–∏–≤ –Ω“±—Å“õ–∞ (–∞–¥–º–∏–Ω)</b>: {file_name}",
                        parse_mode="HTML",
                        protect_content=True
                    )
                else:
                    await callback.message.answer(
                        f"‚ùå –ë“±–ª –ø”ô–Ω –±–æ–π—ã–Ω—à–∞ —Å–ª–∏–≤ –Ω“±—Å“õ–∞–ª–∞—Ä ”ô–ª—ñ –∂–æ“õ.",
                        parse_mode="HTML",
                        reply_markup=get_subjects_keyboard()
                    )
                # –¢–µ—Å—Ç –∂—ñ–±–µ—Ä—ñ–ª–≥–µ–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω –º”ô–∑—ñ—Ä–¥—ñ –∂–∞“£–∞—Ä—Ç—É
                await safe_edit_text(
                    callback,
                    text="<b>üëã –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ!</b> \n\n–ü”ô–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
                    parse_mode="HTML",
                    reply_markup=get_subjects_keyboard()
                )
                return

            # –°–ª–∏–≤ —Ç–µ—Å—Ç—Ç–µ—Ä–≥–µ –∫—É–ª–¥–∞—É–Ω —Ç–µ–∫—Å–µ—Ä—É
            cooldown_record = await conn.fetchrow("""
                SELECT next_special_time FROM user_cooldowns
                WHERE user_id=$1 AND subject_name=$2
            """, user_id, subject_name)

            if cooldown_record and cooldown_record["next_special_time"]:
                next_special_time = cooldown_record["next_special_time"]
                if now < next_special_time:
                    diff = next_special_time - now
                    seconds = int(diff.total_seconds())
                    hours = seconds // 3600
                    minutes = (seconds % 3600) // 60
                    await callback.message.answer(
                        f"‚è≥ <b>–°—ñ–∑ –∫–µ–ª–µ—Å—ñ —Å–ª–∏–≤-–ø—Ä–æ–±–Ω–∏–∫—Ç—ñ {hours} —Å–∞“ì–∞—Ç {minutes} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω –∞–ª–∞ –∞–ª–∞—Å—ã–∑.</b>",
                        parse_mode="HTML",
                        reply_markup=get_subjects_keyboard()
                    )
                    return

            # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ —Å–ª–∏–≤ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
            access = await conn.fetchrow("""
                SELECT remaining_count, last_special_test_id
                FROM user_access
                WHERE user_id = $1 AND subject_name = $2 AND access_type = $3
            """, user_id, subject_name, access_type)

            if not access or access["remaining_count"] <= 0:
                await callback.message.answer(
                    "üí∞ <b>–ë“±–ª –Ω“±—Å“õ–∞“ì–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –∂–æ“õ. –ë–∞“ì–∞—Å—ã 990 —Ç–≥. –°–∞—Ç—ã–ø –∞–ª—É “Ø—à—ñ–Ω –∞–¥–º–∏–Ω–¥–µ—Ä–≥–µ –∂–∞–∑—ã“£—ã–∑:</b> \n\n"
                    "üì± <a href='https://t.me/maxxsikxx'>–ê–¥–º–∏–Ω 1</a> \n"
                    "üì± <a href='https://t.me/x_ae_yedil'>–ê–¥–º–∏–Ω 2</a>",
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=get_subjects_keyboard()
                )
                return

            remaining_count = access["remaining_count"]
            last_special_test_id = access["last_special_test_id"]

            # –°–ª–∏–≤ —Ç–µ—Å—Ç—Ç—ñ –∫–µ–∑–¥–µ–π—Å–æ“õ —Ç–∞“£–¥–∞—É
            test = await conn.fetchrow("""
                SELECT id, file_name, file_url 
                FROM premium_tests
                WHERE subject = $1 AND access_type = $2 AND id > $3
                ORDER BY id ASC
                LIMIT 1
            """, subject_name, access_type, last_special_test_id)

            if not test:
                await callback.message.answer(
                    f"‚ùå –ë“±–ª –ø”ô–Ω –±–æ–π—ã–Ω—à–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ —Å–ª–∏–≤-–Ω“±—Å“õ–∞–ª–∞—Ä —Ç–∞—É—Å—ã–ª–¥—ã.",
                    parse_mode="HTML",
                    reply_markup=get_subjects_keyboard()
                )
                return

            test_id, file_name, file_url = test["id"], test["file_name"], test["file_url"]
            await bot.send_document(
                chat_id=user_id,
                document=file_url,
                caption=f"üíé <b>–°–ª–∏–≤ –Ω“±—Å“õ–∞</b>: {file_name}",
                parse_mode="HTML",
                protect_content=True
            )
            # –¢–µ—Å—Ç –∂—ñ–±–µ—Ä—ñ–ª–≥–µ–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω –º”ô–∑—ñ—Ä–¥—ñ –∂–∞“£–∞—Ä—Ç—É
            await safe_edit_text(
                callback,
                text="<b>üëã –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ!</b> \n\n–ü”ô–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
                parse_mode="HTML",
                reply_markup=get_subjects_keyboard()
            )
            # 'last_special_test_id' –∂–∞“£–∞—Ä—Ç—É –∂”ô–Ω–µ 'remaining_count' –∞–∑–∞–π—Ç—É
            await conn.execute("""
                UPDATE user_access
                SET remaining_count = remaining_count - 1,
                    last_special_test_id = $1
                WHERE user_id = $2 AND subject_name = $3 AND access_type = $4
            """, test_id, user_id, subject_name, access_type)

            # –ö—É–ª–¥–∞—É–Ω–¥—ã –∂–∞“£–∞—Ä—Ç—É: 24 —Å–∞“ì–∞—Ç
            new_time = now + datetime.timedelta(hours=24)
            await conn.execute("""
                INSERT INTO user_cooldowns (user_id, subject_name, next_free_time, next_special_time)
                VALUES ($1, $2, COALESCE(next_free_time, NOW() - INTERVAL '1 day'), $3)
                ON CONFLICT (user_id, subject_name)
                DO UPDATE SET next_special_time=EXCLUDED.next_special_time
            """, user_id, subject_name, new_time)

        except TelegramBadRequest as e:
            logger.error(f"TelegramBadRequest “õ–∞—Ç–µ—Å—ñ: {e.message}", exc_info=True)
            await callback.message.answer("‚ùå –°“±—Ä–∞—É–¥—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.")
        except Exception as e:
            logger.error("–°–ª–∏–≤ –Ω“±—Å“õ–∞–Ω—ã –æ—Ä—ã–Ω–¥–∞—É “õ–∞—Ç–µ—Å—ñ:", exc_info=True)
            await callback.message.answer("‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã (–°–ª–∏–≤ –Ω“±—Å“õ–∞).")

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω ”©“£–¥–µ—É
async def handle_admin_files(message: Message):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫. –ñ“Ø–∫—Ç–µ–ª–≥–µ–Ω —Ñ–∞–π–ª–¥–∞—Ä–¥—ã“£ file_id-—ñ–Ω –∞–ª–∞–¥—ã.
    """
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return  # –ï–≥–µ—Ä –∞–¥–º–∏–Ω –±–æ–ª–º–∞—Å–∞, –µ—à–Ω”ô—Ä—Å–µ –∂–∞—Å–∞–º–∞–π–¥—ã

    # –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä–¥—ã –µ–ª–µ–º–µ—É
    if message.text and message.text.startswith('/'):
        return

    if message.document:
        file_id = message.document.file_id
        await message.answer(f"üìÑ “ö“±–∂–∞—Ç “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã!\nfile_id: {file_id}")
    elif message.photo:
        file_id = message.photo[-1].file_id
        await message.answer(f"üì∑ –°—É—Ä–µ—Ç “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã!\nfile_id: {file_id}")
    elif message.video:
        file_id = message.video.file_id
        await message.answer(f"üé• –í–∏–¥–µ–æ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã!\nfile_id: {file_id}")
    elif message.audio:
        file_id = message.audio.file_id
        await message.answer(f"üéµ –ê—É–¥–∏–æ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã!\nfile_id: {file_id}")
    else:
        await message.answer("‚ùì –ë–µ–ª–≥—ñ—Å—ñ–∑ —Ñ–∞–π–ª —Ç“Ø—Ä—ñ. “ö“±–∂–∞—Ç, —Å—É—Ä–µ—Ç, –≤–∏–¥–µ–æ –Ω–µ–º–µ—Å–µ –∞—É–¥–∏–æ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑—à—ñ.")

# 13. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã

async def admin_grant_access(message: Message, command: Command):
    """
    –ê–¥–º–∏–Ω–¥—ñ–∫ –∫–æ–º–∞–Ω–¥–∞. /grant_access <user_id> <subject>
    –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Å–ª–∏–≤ –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä–≥–µ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –±–µ—Ä–µ–¥—ñ.
    """
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –°—ñ–∑–¥–µ –æ—Å—ã –∫–æ–º–∞–Ω–¥–∞–Ω—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “õ“±“õ—ã“ì—ã –∂–æ“õ.")
        return

    args = command.args.split()
    if len(args) != 2:
        await message.answer("üîç <b>–ö–æ–º–∞–Ω–¥–∞–Ω—ã –¥“±—Ä—ã—Å –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑:</b> /grant_access <user_id> <subject>\n\n"
                             "<b>–ú—ã—Å–∞–ª—ã:</b> /grant_access 123456789 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                             parse_mode="HTML")
        return

    target_user_id, subject = args
    subject_map_reverse = {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "math",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "informatics",
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤—ë–ª –ª–∏ –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if subject not in subject_map_reverse:
        await message.answer("‚ùå “ö–∞—Ç–µ: –ë–µ–ª–≥—ñ—Å—ñ–∑ –ø”ô–Ω –∞—Ç–∞—É—ã. “ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –ø”ô–Ω–¥–µ—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞.")
        return

    access_type = "special"
    additional_special_tests = 10  # –°–ª–∏–≤ –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä —Å–∞–Ω—ã

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ user_access
    async with pool.acquire() as conn:
        try:
            # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Å–ª–∏–≤ –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä–¥—ñ “õ–æ—Å—É
            await conn.execute(
                """
                INSERT INTO user_access (user_id, subject_name, access_type, remaining_count, last_special_test_id)
                VALUES ($1, $2, $3, $4, 0)
                ON CONFLICT (user_id, subject_name, access_type)
                DO UPDATE SET remaining_count = user_access.remaining_count + EXCLUDED.remaining_count
                """,
                int(target_user_id), subject_map_reverse[subject], access_type, additional_special_tests
            )

            # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ “õ“±—Ç—Ç—ã“õ—Ç–∞—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã –∂—ñ–±–µ—Ä—É
            await bot.send_message(
                chat_id=int(target_user_id),
                text=f"üéâ <b>“ö“±—Ç—Ç—ã“õ—Ç–∞–π–º—ã–∑!</b> \n\n–°—ñ–∑–≥–µ <b>{subject}</b> –ø”ô–Ω—ñ –±–æ–π—ã–Ω—à–∞ 10 —Å–ª–∏–≤ –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä–≥–µ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –±–µ—Ä—ñ–ª–¥—ñ.\n"
                     f"üìà “ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç –∞–ª—É “Ø—à—ñ–Ω –±—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.",
                parse_mode="HTML",
                protect_content=True
            )

            await message.answer(f"‚úÖ –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ <b>{subject}</b> –ø”ô–Ω—ñ –±–æ–π—ã–Ω—à–∞ 10 —Å–ª–∏–≤ –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä–≥–µ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –±–µ—Ä—ñ–ª–¥—ñ.",
                                 parse_mode="HTML")
        except Exception as e:
            logger.error("–°–ª–∏–≤ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫—Ç—ñ –±–µ—Ä—É “õ–∞—Ç–µ—Å—ñ:", exc_info=True)
            await message.answer("‚ùå –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Å–ª–∏–≤ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫—Ç—ñ –±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.",
                                 parse_mode="HTML")

# 5. /add_test –∂”ô–Ω–µ /add_prem_test –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã–Ω ”©“£–¥–µ—É

async def admin_add_test(message: Message, command: Command, state: FSMContext):
    """
    –ê–¥–º–∏–Ω–¥—ñ–∫ –∫–æ–º–∞–Ω–¥–∞. /add_test <subject>
    –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Ç–µ–≥—ñ–Ω –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä–¥—ñ “õ–æ—Å—É.
    """
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –°—ñ–∑–¥–µ –æ—Å—ã –∫–æ–º–∞–Ω–¥–∞–Ω—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “õ“±“õ—ã“ì—ã –∂–æ“õ.")
        return

    args = command.args.split()
    if len(args) != 1:
        await message.answer("üîç <b>–ö–æ–º–∞–Ω–¥–∞–Ω—ã –¥“±—Ä—ã—Å –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑:</b> /add_test <subject>\n\n"
                             "<b>–ú—ã—Å–∞–ª—ã:</b> /add_test –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                             parse_mode="HTML")
        return

    subject = args[0]
    subject_map_reverse = {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "math",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "informatics",
    }

    if subject not in subject_map_reverse:
        await message.answer("‚ùå “ö–∞—Ç–µ: –ë–µ–ª–≥—ñ—Å—ñ–∑ –ø”ô–Ω –∞—Ç–∞—É—ã. “ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –ø”ô–Ω–¥–µ—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞.")
        return

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
    await message.answer("üìÑ <b>–¢–µ–≥—ñ–Ω –ø—Ä–æ–±–Ω–∏–∫—Ç—ñ –∂“Ø–∫—Ç–µ“£—ñ–∑:</b>", parse_mode="HTML")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    await AnnouncementStates.waiting_for_text.set()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—Ç—ñ FSMContext-–∫–µ
    await state.update_data(subject=subject_map_reverse[subject], access_type="free")

async def admin_add_prem_test(message: Message, command: Command, state: FSMContext):
    """
    –ê–¥–º–∏–Ω–¥—ñ–∫ –∫–æ–º–∞–Ω–¥–∞. /add_prem_test <subject>
    –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Å–ª–∏–≤ –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä–¥—ñ “õ–æ—Å—É.
    """
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –°—ñ–∑–¥–µ –æ—Å—ã –∫–æ–º–∞–Ω–¥–∞–Ω—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “õ“±“õ—ã“ì—ã –∂–æ“õ.")
        return

    args = command.args.split()
    if len(args) != 1:
        await message.answer("üîç <b>–ö–æ–º–∞–Ω–¥–∞–Ω—ã –¥“±—Ä—ã—Å –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑:</b> /add_prem_test <subject>\n\n"
                             "<b>–ú—ã—Å–∞–ª—ã:</b> /add_prem_test –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
                             parse_mode="HTML")
        return

    subject = args[0]
    subject_map_reverse = {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "math",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "informatics",
    }

    if subject not in subject_map_reverse:
        await message.answer("‚ùå “ö–∞—Ç–µ: –ë–µ–ª–≥—ñ—Å—ñ–∑ –ø”ô–Ω –∞—Ç–∞—É—ã. “ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –ø”ô–Ω–¥–µ—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞.")
        return

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
    await message.answer("üíé <b>–°–ª–∏–≤ –ø—Ä–æ–±–Ω–∏–∫—Ç—ñ –∂“Ø–∫—Ç–µ“£—ñ–∑:</b>", parse_mode="HTML")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    await AnnouncementStates.waiting_for_text.set()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—Ç—ñ FSMContext-–∫–µ
    await state.update_data(subject=subject_map_reverse[subject], access_type="special")

async def receive_test_file(message: Message, state: FSMContext):
    """–ê–¥–º–∏–Ω–Ω–∞–Ω —Ç–µ—Å—Ç —Ñ–∞–π–ª—ã–Ω –∞–ª–∞–¥—ã –∂”ô–Ω–µ –¥–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ “õ–æ—Å–∞–¥—ã."""
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –°—ñ–∑–¥–µ –æ—Å—ã –∫–æ–º–∞–Ω–¥–∞–Ω—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “õ“±“õ—ã“ì—ã –∂–æ“õ.")
        return

    data = await state.get_data()
    subject = data.get("subject")
    access_type = data.get("access_type")

    file_url = None
    file_name = None

    if message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name
        file = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file.file_path}"
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_name = "photo.jpg"
        file = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file.file_path}"
    else:
        await message.answer("‚ùå –¢–µ–∫ —Ñ–∞–π–ª —Ç“Ø—Ä—ñ–Ω “ì–∞–Ω–∞ –∂“Ø–∫—Ç–µ—É—ñ“£—ñ–∑ “õ–∞–∂–µ—Ç (“õ“±–∂–∞—Ç –Ω–µ–º–µ—Å–µ —Å—É—Ä–µ—Ç).",
                             parse_mode="HTML")
        return

    if not file_url or not file_name:
        await message.answer("‚ùå –§–∞–π–ª–¥—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.", parse_mode="HTML")
        return

    async with pool.acquire() as conn:
        try:
            if access_type == "free":
                await conn.execute("""
                    INSERT INTO tests (subject, file_name, file_url)
                    VALUES ($1, $2, $3)
                """, subject, file_name, file_url)
                await message.answer(f"‚úÖ –¢–µ–≥—ñ–Ω –ø—Ä–æ–±–Ω–∏–∫—Ç—ñ <b>{subject}</b> –ø”ô–Ω—ñ –±–æ–π—ã–Ω—à–∞ “õ–æ—Å—ã–ª–¥—ã.",
                                     parse_mode="HTML")
            elif access_type == "special":
                await conn.execute("""
                    INSERT INTO premium_tests (subject, access_type, file_name, file_url)
                    VALUES ($1, $2, $3, $4)
                """, subject, access_type, file_name, file_url)
                await message.answer(f"‚úÖ –°–ª–∏–≤ –ø—Ä–æ–±–Ω–∏–∫—Ç—ñ <b>{subject}</b> –ø”ô–Ω—ñ –±–æ–π—ã–Ω—à–∞ “õ–æ—Å—ã–ª–¥—ã.",
                                     parse_mode="HTML")
            else:
                await message.answer("‚ùå –ë–µ–ª–≥—ñ—Å—ñ–∑ access_type.", parse_mode="HTML")
                return
        except Exception as e:
            logger.error("–¢–µ—Å—Ç —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω “õ–æ—Å—É “õ–∞—Ç–µ—Å—ñ:", exc_info=True)
            await message.answer("‚ùå –¢–µ—Å—Ç —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω “õ–æ—Å—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.", parse_mode="HTML")
            return

    # –¢–∞–∑–∞—Ä—Ç—É
    await state.clear()

# 14. /help –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ—É

async def show_help(message: Message):
    """
    –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä –º–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–ª–∞—Ä“ì–∞ “õ–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä–¥—ã –∫”©—Ä—Å–µ—Ç–µ–¥—ñ.
    –ê–ª–¥—ã“£“ì—ã –º”ô–∑—ñ—Ä–¥—ñ –∂–æ—è–¥—ã, –µ–≥–µ—Ä –æ–ª –±–∞—Ä –±–æ–ª—Å–∞.
    """
    user_id = message.from_user.id

    # –ê–ª–¥—ã“£“ì—ã –º”ô–∑—ñ—Ä–¥—ñ –∂–æ—é, –µ–≥–µ—Ä –±–∞—Ä –±–æ–ª—Å–∞
    if user_id in user_last_menu_message:
        try:
            await bot.delete_message(chat_id=user_id, message_id=user_last_menu_message[user_id])
            del user_last_menu_message[user_id]
            logger.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ {user_id} –∞–ª–¥—ã“£“ì—ã –º”ô–∑—ñ—Ä—ñ –∂–æ–π—ã–ª–¥—ã.")
        except TelegramBadRequest:
            logger.warning(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ {user_id} –∞–ª–¥—ã“£“ì—ã –º”ô–∑—ñ—Ä—ñ–Ω –∂–æ—é –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.")

    if user_id in ADMIN_IDS:
        help_text = (
            "<b>üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "<b>/grant_access &lt;user_id&gt; &lt;subject&gt;</b> - –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Å–ª–∏–≤ –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä–≥–µ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –±–µ—Ä—É.\n"
            "<b>/announce</b> - –ë–∞—Ä–ª—ã“õ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É.\n"
            "<b>/add_test &lt;subject&gt;</b> - –¢–µ–≥—ñ–Ω –ø—Ä–æ–±–Ω–∏–∫—Ç—ñ “õ–æ—Å—É.\n"
            "<b>/add_prem_test &lt;subject&gt;</b> - –°–ª–∏–≤ –ø—Ä–æ–±–Ω–∏–∫—Ç—ñ “õ–æ—Å—É.\n\n"
            "<b>‚ÑπÔ∏è –ù–µ–≥—ñ–∑–≥—ñ –∞“õ–ø–∞—Ä–∞—Ç –∞–ª—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑.</b>"
        )
    else:
        help_text = (
            "<b>‚ÑπÔ∏è “ö–æ—Å—ã–º—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä –±–æ–π—ã–Ω—à–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–ª–∞—Ä“ì–∞ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑:</b>\n\n"
            "üì± <a href='https://t.me/maxxsikxx'>–ê–¥–º–∏–Ω 1</a> \n"
            "üì± <a href='https://t.me/x_ae_yedil'>–ê–¥–º–∏–Ω 2</a>"
        )

    if user_id in ADMIN_IDS:
        keyboard = get_help_keyboard()
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ê–¥–º–∏–Ω 1", url="https://t.me/maxxsikxx")],
            [InlineKeyboardButton(text="–ê–¥–º–∏–Ω 2", url="https://t.me/x_ae_yedil")],
        ])

    try:
        sent_message = await message.answer(help_text, parse_mode="HTML", reply_markup=keyboard)
        user_last_menu_message[user_id] = sent_message.message_id
    except TelegramBadRequest as e:
        logger.error(f"–•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e.message}", exc_info=True)
        await message.answer("‚ùå –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.")

# 15. –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –ø—Ä–æ—Ü–µ—Å—ñ–Ω ”©“£–¥–µ—É

async def cmd_announce(message: Message, state: FSMContext):
    """–•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –ø—Ä–æ—Ü–µ—Å—ñ–Ω –±–∞—Å—Ç–∞–π–¥—ã."""
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –°—ñ–∑–¥–µ –æ—Å—ã –∫–æ–º–∞–Ω–¥–∞–Ω—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “õ“±“õ—ã“ì—ã –∂–æ“õ.")
        return

    await message.answer("üì¢ <b>–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–∞–∑—ã“£—ã–∑:</b>", parse_mode="HTML")
    await state.set_state(AnnouncementStates.waiting_for_text)

async def receive_announcement_text(message: Message, state: FSMContext):
    """–ê–¥–º–∏–Ω–Ω–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã“£ –º”ô—Ç—ñ–Ω—ñ–Ω –∞–ª–∞–¥—ã."""
    await state.update_data(announcement_text=message.text)
    await message.answer("üì∑ <b>–•–∞–±–∞—Ä–ª–∞–º–∞“ì–∞ —Å—É—Ä–µ—Ç “õ–æ—Å“õ—ã“£—ã–∑ –∫–µ–ª—Å–µ, –∂“Ø–∫—Ç–µ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–∞“£–¥–∞“£—ã–∑:</b>",
                         parse_mode="HTML",
                         reply_markup=get_skip_or_add_photo_keyboard())
    await state.set_state(AnnouncementStates.waiting_for_photo)

async def receive_announcement_photo(callback: CallbackQuery, state: FSMContext):
    """–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã“£ —Å—É—Ä–µ—Ç—ñ–Ω –∞–ª–∞–¥—ã –Ω–µ–º–µ—Å–µ –ø—Ä–æ–ø—É—Å–∫–∞–¥—ã."""
    data = callback.data
    if data == "add_photo":
        await callback.message.answer("üì∑ <b>–°—É—Ä–µ—Ç—Ç—ñ –∂“Ø–∫—Ç–µ“£—ñ–∑:</b>", parse_mode="HTML")
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ —Å—Ç–µ–π—Ç waiting_for_photo, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è —Ñ–æ—Ç–æ
    elif data == "skip_photo":
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ
        await proceed_with_announcement(callback, state, photo=None)
    else:
        await callback.answer("‚ùå –¢“Ø—Å—ñ–Ω—ñ–∫—Å—ñ–∑ ”ô—Ä–µ–∫–µ—Ç.", show_alert=False)

async def proceed_with_announcement(callback: CallbackQuery, state: FSMContext, photo: str = None):
    """–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –±–∞—Ä–ª—ã“õ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ –∂—ñ–±–µ—Ä–µ–¥—ñ."""
    data = await state.get_data()
    announcement_text = data.get("announcement_text", "")

    async with pool.acquire() as conn:
        try:
            users = await conn.fetch("SELECT user_id FROM users")
            logger.info(f"–ë–∞—Ä–ª—ã“õ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª—É–¥–µ: {len(users)} –∞–¥–∞–º.")
        except Exception as e:
            logger.error("–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã –∞–ª—É “õ–∞—Ç–µ—Å—ñ:", exc_info=True)
            await notify_admins(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {str(e)}")
            await callback.message.answer("‚ùå –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.")
            await state.clear()
            return

    await callback.message.answer("üì§ –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂—ñ–±–µ—Ä—É –±–∞—Å—Ç–∞–ª–¥—ã. –ë“±–ª –±—ñ—Ä–∞–∑ —É–∞“õ—ã—Ç –∞–ª—É—ã –º“Ø–º–∫—ñ–Ω...", parse_mode="HTML")

    success = 0
    failed = 0
    for user in users:
        uid = user["user_id"]
        try:
            if photo:
                await bot.send_photo(
                    chat_id=uid,
                    photo=photo,
                    caption=announcement_text,
                    parse_mode="HTML",
                    protect_content=True
                )
            else:
                await bot.send_message(
                    chat_id=uid,
                    text=announcement_text,
                    parse_mode="HTML",
                    protect_content=True
                )
            success += 1
            await asyncio.sleep(0.05)  # Telegram –ª–∏–º–∏—Ç—Ç–µ—Ä—ñ–Ω —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω –∫—ñ–¥—ñ—Ä—ñ—Å
        except Exception as e:
            logger.error(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {uid} - {e}")
            failed += 1
            continue

    await callback.message.answer(f"‚úÖ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ! \n\n–°”ô—Ç—Ç—ñ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ: {success}\n“ö–∞—Ç–µ–ª–µ—Ä: {failed}")
    await state.clear()

async def receive_announcement_photo_message(message: Message, state: FSMContext):
    """–ê–¥–º–∏–Ω–Ω–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã“£ —Å—É—Ä–µ—Ç—ñ–Ω –∞–ª–∞–¥—ã (—Å–æ–æ–±—â–µ–Ω–∏–µ–º)."""
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –°—ñ–∑–¥–µ –æ—Å—ã –∫–æ–º–∞–Ω–¥–∞–Ω—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “õ“±“õ—ã“ì—ã –∂–æ“õ.")
        return

    data = await state.get_data()
    announcement_text = data.get("announcement_text", "")

    if message.photo:
        photo = message.photo[-1].file_id
    else:
        photo = None

    async with pool.acquire() as conn:
        try:
            users = await conn.fetch("SELECT user_id FROM users")
            logger.info(f"–ë–∞—Ä–ª—ã“õ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª—É–¥–µ: {len(users)} –∞–¥–∞–º.")
        except Exception as e:
            logger.error("–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã –∞–ª—É “õ–∞—Ç–µ—Å—ñ:", exc_info=True)
            await notify_admins(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {str(e)}")
            await message.answer("‚ùå –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.")
            await state.clear()
            return

    await message.answer("üì§ –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂—ñ–±–µ—Ä—É –±–∞—Å—Ç–∞–ª–¥—ã. –ë“±–ª –±—ñ—Ä–∞–∑ —É–∞“õ—ã—Ç –∞–ª—É—ã –º“Ø–º–∫—ñ–Ω...", parse_mode="HTML")

    success = 0
    failed = 0
    for user in users:
        uid = user["user_id"]
        try:
            if photo:
                await bot.send_photo(
                    chat_id=uid,
                    photo=photo,
                    caption=announcement_text,
                    parse_mode="HTML",
                    protect_content=True
                )
            else:
                await bot.send_message(
                    chat_id=uid,
                    text=announcement_text,
                    parse_mode="HTML",
                    protect_content=True
                )
            success += 1
            await asyncio.sleep(0.05)  # Telegram –ª–∏–º–∏—Ç—Ç–µ—Ä—ñ–Ω —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω –∫—ñ–¥—ñ—Ä—ñ—Å
        except Exception as e:
            logger.error(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {uid} - {e}")
            failed += 1
            continue

    await message.answer(f"‚úÖ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ! \n\n–°”ô—Ç—Ç—ñ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ: {success}\n“ö–∞—Ç–µ–ª–µ—Ä: {failed}")
    await state.clear()

# 16. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã–Ω —Ç—ñ—Ä–∫–µ—É
async def admin_commands_setup(dp: Dispatcher):
    dp.message.register(admin_grant_access, Command("grant_access"))
    dp.message.register(admin_add_test, Command("add_test"))
    dp.message.register(admin_add_prem_test, Command("add_prem_test"))
    dp.message.register(cmd_announce, Command("announce"))
    dp.message.register(receive_announcement_text, AnnouncementStates.waiting_for_text)
    dp.callback_query.register(receive_announcement_photo, F.data.in_({"add_photo", "skip_photo"}), AnnouncementStates.waiting_for_photo)
    dp.message.register(receive_test_file, F.content_type.in_([ContentType.DOCUMENT, ContentType.PHOTO]), AnnouncementStates.waiting_for_text)

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–ª–∞—Ä“ì–∞ —Ñ–∞–π–ª–¥–∞—Ä–¥—ã “õ–∞–±—ã–ª–¥–∞—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—ñ–Ω —Ç—ñ—Ä–∫–µ—É
    dp.message.register(
        handle_admin_files,
        F.content_type.in_([ContentType.DOCUMENT, ContentType.PHOTO, ContentType.VIDEO, ContentType.AUDIO])
    )

    # /help –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω —Ç—ñ—Ä–∫–µ—É
    dp.message.register(show_help, Command("help"))

# 17. –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
async def main():
    await on_startup()
    await admin_commands_setup(dp)

    # –ë–∞—Å“õ–∞ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä–¥—ã —Ç—ñ—Ä–∫–µ—É
    dp.message.register(send_welcome, Command("start"))
    dp.message.register(show_subscribers, Command("subscribers"))
    dp.message.register(show_subscribers, Command("count"))  # /count –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω /subscribers-–∫–µ —Ç—ñ—Ä–∫–µ—É

    # CallbackQuery-–ª–µ—Ä–¥—ñ ”©“£–¥–µ—É
    dp.callback_query.register(handle_callback)

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        await pool.close()

if __name__ == "__main__":
    asyncio.run(main())
