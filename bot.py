import os
import asyncio
import psycopg2
import datetime

from aiogram import Bot, Dispatcher
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
DB_URL = os.getenv("DB_URL")

if not API_TOKEN or not DB_URL:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –∏–ª–∏ DB_URL –≤ —Ñ–∞–π–ª–µ .env!")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ (–∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ) –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = {1044841557, 1727718224}  # <-- –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ Telegram user_id

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
try:
    conn = psycopg2.connect(DB_URL, options="-c client_encoding=UTF8")
    cursor = conn.cursor()
    print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
except Exception as e:
    print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", e)
    exit()

# ---------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ----------

def initialize_db():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_cooldown (
            user_id BIGINT,
            subject_name TEXT,
            next_free_time TIMESTAMP,
            PRIMARY KEY (user_id, subject_name)
        );
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_access (
            user_id BIGINT,
            subject_name TEXT,
            access_type TEXT,
            remaining_count INTEGER,
            PRIMARY KEY (user_id, subject_name, access_type)
        );
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS tests (
            id SERIAL PRIMARY KEY,
            subject TEXT,
            file_name TEXT,
            file_url TEXT
        );
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS premium_tests (
            id SERIAL PRIMARY KEY,
            subject TEXT,
            access_type TEXT,
            file_name TEXT,
            file_url TEXT
        );
    """)
    conn.commit()

initialize_db()
#kjsdbc

# ---------- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–† ----------

def get_subjects_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ (–±–µ–∑ '–ú–∞—Ç. —Å–∞—É–∞—Ç—Ç—ã–ª—ã“õ')."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", callback_data="subject_informatics")],
        [InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="subject_math")],
    ])
    return keyboard

def get_variant_keyboard(subject_code: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–µ—Å—Ç–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–µ–≥—ñ–Ω –Ω“±—Å“õ–∞", callback_data=f"variant_free_{subject_code}")],
        [InlineKeyboardButton(text="–ï—Ä–µ–∫—à–µ –Ω“±—Å“õ–∞ (990 —Ç–≥)", callback_data=f"variant_special_{subject_code}")],
        [InlineKeyboardButton(text="–ï—Ä–µ–∫—à–µ+–ñ–∞—É–∞–ø (1490 —Ç–≥)", callback_data=f"variant_special_with_answers_{subject_code}")],
        [InlineKeyboardButton(text="–ê—Ä—Ç“õ–∞", callback_data="back_subjects")],
    ])
    return keyboard

def get_info_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="main_menu")],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: üî¢", callback_data="show_subscribers")]
    ])
    return keyboard

# ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ----------

@dp.message(Command("start"))
async def send_welcome(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        cursor.execute("""
            INSERT INTO users (user_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (user_id) DO NOTHING
        """, (user_id, username, first_name, last_name))
        conn.commit()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e)

    keyboard = get_subjects_keyboard()
    await message.answer("–°”ô–ª–µ–º! –ü”ô–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=keyboard)

@dp.message(Command("subscribers"))
async def show_subscribers(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}")

@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    data = callback.data

    if data.startswith("subject_"):
        await callback.message.edit_text(
            text="“ö–∞–Ω–¥–∞–π –Ω“±—Å“õ–∞ –∫–µ—Ä–µ–∫?",
            reply_markup=get_variant_keyboard(data)
        )
        await callback.answer()
        return

    if data == "main_menu":
        await callback.message.edit_text(
            text="–°”ô–ª–µ–º! –ü”ô–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
            reply_markup=get_subjects_keyboard()
        )
        await callback.answer()
        return

    if data == "back_subjects":
        await callback.message.edit_text(
            text="–°”ô–ª–µ–º! –ü”ô–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
            reply_markup=get_subjects_keyboard()
        )
        await callback.answer()
        return

    if data == "show_subscribers":
        cursor.execute("SELECT COUNT(*) FROM users")
        count = cursor.fetchone()[0]
        await callback.message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}")
        await callback.answer()
        return

    if data.startswith("variant_free_"):
        subject_code = data.replace("variant_free_", "")
        await handle_free_variant(callback, subject_code)
        return

    if data.startswith("variant_special_"):
        splitted = data.split("_")
        access_type = "special_with_answers" if "with_answers" in data else "special"
        subject_code = "_".join(splitted[2:])
        await handle_special_variant(callback, subject_code, access_type)
        return

    await callback.answer("–¢–∞“õ—ã—Ä—ã–ø –∞–Ω—ã“õ—Ç–∞–ª–º–∞–¥—ã.", show_alert=False)

async def handle_free_variant(callback: CallbackQuery, subject_code: str):
    user_id = callback.from_user.id
    subject_map = {
        "subject_informatics": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "subject_math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    }
    subject_name = subject_map.get(subject_code, "–ë–µ–ª–≥—ñ—Å—ñ–∑")

    cursor.execute("SELECT next_free_time FROM user_cooldown WHERE user_id = %s AND subject_name = %s", (user_id, subject_name))
    row = cursor.fetchone()
    now = datetime.datetime.now()

    if row:
        next_time = row[0]
        if now < next_time:
            diff = next_time - now
            hours = diff.seconds // 3600
            minutes = (diff.seconds % 3600) // 60
            await callback.message.answer(
                f"–°—ñ–∑ –æ—Å—ã –±”©–ª—ñ–º–Ω—ñ“£ —Ç–µ–≥—ñ–Ω –Ω“±—Å“õ–∞—Å—ã–Ω {hours} —Å–∞“ì–∞—Ç {minutes} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω “ì–∞–Ω–∞ –∞–ª–∞ –∞–ª–∞—Å—ã–∑.",
                reply_markup=get_subjects_keyboard()
            )
            await callback.answer()
            return
        

    try:
        cursor.execute(
            "SELECT file_name, file_url FROM tests WHERE subject = %s LIMIT 1",
            (subject_name,)
        )
        test = cursor.fetchone()
        if test:
            file_name, file_url = test
            await callback.message.answer_document(
                file_url,
                caption=f"“∞–ë–¢–¥–∞ –∫–µ–ª—É —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã –∞–∑–¥–∞—É –Ω“±—Å“õ–∞ (–¢–µ–≥—ñ–Ω) - {file_name}",
                reply_markup=get_subjects_keyboard(),
                protect_content=True  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫—É
            )
        else:
            await callback.message.answer(
                f"–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, {subject_name} –±–æ–π—ã–Ω—à–∞ —Ç–µ–≥—ñ–Ω –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä –∂–æ“õ.",
                reply_markup=get_subjects_keyboard()
            )
    except Exception as e:
        await callback.message.answer("“ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ –∂–∞–∑—ã“£—ã–∑.")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ (free):", e)

    new_time = now + datetime.timedelta(hours=24)
    cursor.execute(
        """
        INSERT INTO user_cooldown (user_id, subject_name, next_free_time)
        VALUES (%s, %s, %s)
        ON CONFLICT (user_id, subject_name)
        DO UPDATE SET next_free_time = EXCLUDED.next_free_time
        """,
        (user_id, subject_name, new_time)
    )
    conn.commit()

    await callback.answer()

async def handle_special_variant(callback: CallbackQuery, subject_code: str, access_type: str):
    user_id = callback.from_user.id
    subject_map = {
        "subject_informatics": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "subject_math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    }
    subject_name = subject_map.get(subject_code, "–ë–µ–ª–≥—ñ—Å—ñ–∑")

    cursor.execute(
        """
        SELECT remaining_count 
        FROM user_access
        WHERE user_id = %s
          AND subject_name = %s
          AND access_type = %s
        """,
        (user_id, subject_name, access_type)
    )
    row = cursor.fetchone()

    if not row:
        price = "990" if access_type == "special" else "1490"
        await callback.message.answer(
            f"–ë“±–ª –Ω“±—Å“õ–∞“ì–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –∂–æ“õ. –ë–∞“ì–∞—Å—ã {price} —Ç–≥. –°–∞—Ç—ã–ø –∞–ª—É “Ø—à—ñ–Ω ”ô–∫—ñ–º—à—ñ–≥–µ –∂–∞–∑—ã“£—ã–∑.",
            reply_markup=get_subjects_keyboard()
        )
        await callback.answer()
        return

    remaining_count = row[0]
    if remaining_count <= 0:
        await callback.message.answer(f"–°—ñ–∑–¥—ñ“£ {subject_name} –ø”ô–Ω—ñ –±–æ–π—ã–Ω—à–∞ –ø—Ä–æ–±–Ω–∏–∫—Ç–µ—Ä–¥—ñ“£ –ª–∏–º–∏—Ç—ñ —Ç–∞—É—Å—ã–ª–¥—ã.")
        await callback.answer()
        return

    try:
        cursor.execute(
            """
            SELECT file_name, file_url 
            FROM premium_tests
            WHERE subject = %s AND access_type = %s
            ORDER BY id
            LIMIT 1
            """,
            (subject_name, access_type)
        )
        test = cursor.fetchone()

        if test:
            file_name, file_url = test
            await callback.message.answer_document(
                file_url,
                caption=f"–ï—Ä–µ–∫—à–µ –Ω“±—Å“õ–∞: {file_name}",
                protect_content=True  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫—É
            )

            cursor.execute(
                """
                UPDATE user_access
                SET remaining_count = remaining_count - 1
                WHERE user_id = %s
                  AND subject_name = %s
                  AND access_type = %s
                """,
                (user_id, subject_name, access_type)
            )
            conn.commit()
        else:
            await callback.message.answer(f"–ë“±–ª –ø”ô–Ω –±–æ–π—ã–Ω—à–∞ –ï—Ä–µ–∫—à–µ –Ω“±—Å“õ–∞–ª–∞—Ä ”ô–ª—ñ –∂–æ“õ.", reply_markup=get_subjects_keyboard())
    except Exception as e:
        await callback.message.answer("“ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã (–ï—Ä–µ–∫—à–µ –Ω“±—Å“õ–∞).")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ (special):", e)

    await callback.answer()

@dp.message()
async def handle_admin_files(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ª—É—á–∞–µ—Ç file_id –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
    

    if message.document:
        file_id = message.document.file_id
        await message.answer(f"–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω!\nfile_id: {file_id}")
    elif message.photo:
        file_id = message.photo[-1].file_id
        await message.answer(f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\nfile_id: {file_id}")
    elif message.video:
        file_id = message.video.file_id
        await message.answer(f"–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!\nfile_id: {file_id}")
    elif message.audio:
        file_id = message.audio.file_id
        await message.answer(f"–ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ!\nfile_id: {file_id}")
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ.")

@dp.message(Command("count"))
async def show_subscriber_count(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}", reply_markup=get_info_keyboard())

# ---------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ----------

async def main():
    dp.message.register(send_welcome, Command("start"))
    dp.message.register(show_subscribers, Command("subscribers"))
    dp.message.register(show_subscriber_count, Command("count"))
    dp.callback_query.register(handle_callback)
    dp.message.register(handle_admin_files)

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())